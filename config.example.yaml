app:
  env: "local"
  name: "ichi-go"
  version: "1.0.0"
  debug: true

http:
  timeout: 10000
  port: 8080
  cors:
    allow_origins: ["*"]

http-client:
  timeout: 10000
  retry_count: 10
  retry_wait_time: 20000
  retry_max_wait: 60000
  logger_enabled: false

web:
  port: 8081

database:
  driver: "mysql"
  host: "localhost"
  port: 3306
  user: "root"
  password: "password"
  name: "mydb"
  max_idle_conns: 10
  max_open_conns: 100
  max_conn_life_time: 3600
  debug: true

cache:
  driver: "redis"
  client_name: "ichigo-cache"
  host: "localhost"
  port: 6379
  password: ""
  username: ""
  db: 0
  pool_size: 20
  timeout: 10000
  use_tls: false
  skip_verify: false

log:
  level: "debug"
  pretty: true
  request_logging:
    enabled: true
    driver: "builtin"
  requestId:
    driver: "builtin"

pkgclient:
  pokemon_api:
    base_url: "https://pokeapi.co/api/v2"
    timeout: 10000
    retry: 3

messages:
  enabled: true
  rabbitmq:
    enabled: true
    host: "localhost"
    port: 5672
    username: "guest"
    password: "guest"

messaging:
  enabled: false
  rabbitmq:
    enabled: true
    connection:
      host: "localhost"
      port: 5672
      username: "guest"
      password: "guest"
      vhost: "/"
      connection_name: "user-service-v1"
    exchanges:
      - name: "app.events"
        type: "topic"
        durable: true

      - name: "app.notifications"
        type: "fanout"
        durable: true
    publisher:
      exchange_name: "app.events"
    consumers:
      # Consumer 1: Email verification (critical, slow processing)
      - name: "email_verifier"
        enabled: true
        queue:
          name: "user.email.verification"
          durable: true
          auto_delete: false
          exclusive: false
        exchange_name: "app.events"
        routing_keys:
          - "email.verified"
          - "email.verification.requested"
        prefetch_count: 5        # Low prefetch - slow processing
        worker_pool_size: 3      # Few workers - avoid overwhelming email service
        auto_ack: false          # Manual ack for reliability
        exclusive: false
        consumer_tag: "email_verifier_v1"

      # Consumer 2: Payment events (important, fast processing)
      - name: "payment_handler"
        enabled: true
        queue:
          name: "user.payment.events"
          durable: true
          auto_delete: false
          exclusive: false
        exchange_name: "app.events"
        routing_keys:
          - "payment.completed"
          - "payment.failed"
          - "subscription.*"     # Wildcard routing
        prefetch_count: 50       # Higher prefetch for fast processing
        worker_pool_size: 10     # More workers for throughput
        auto_ack: false
        exclusive: false
        consumer_tag: "payment_handler_v1"

      # Consumer 3: Notification dispatcher (non-critical, very fast)
      - name: "notification_dispatcher"
        enabled: true
        queue:
          name: "user.notifications"
          durable: false         # Transient - don't persist
          auto_delete: true      # Delete when no consumers
          exclusive: false
        exchange_name: "app.notifications"
        routing_keys: []         # Fanout ignores routing keys
        prefetch_count: 100      # Very high prefetch
        worker_pool_size: 20     # Many workers
        auto_ack: true           # Auto-ack for speed (acceptable loss)
        exclusive: false
        consumer_tag: "notifier_v1"

      # Consumer 4: User analytics (optional, can be disabled)
      - name: "analytics_processor"
        enabled: false           # Disabled by default
        queue:
          name: "user.analytics"
          durable: true
          auto_delete: false
          exclusive: false
        exchange_name: "app.events"
        routing_keys:
          - "user.created"
          - "user.updated"
          - "user.deleted"
        prefetch_count: 20
        worker_pool_size: 5
        auto_ack: false
        exclusive: false
        consumer_tag: "analytics_v1"